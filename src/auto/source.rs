// This file was generated by gir (a4dcf95) from gir-files (71d73f0)
// DO NOT EDIT

use MainContext;
use SourceFuncs;
use ffi;
use translate::*;

glib_wrapper! {
    pub struct Source(Shared<ffi::GSource>);

    match fn {
        ref => |ptr| ffi::g_source_ref(ptr),
        unref => |ptr| ffi::g_source_unref(ptr),
    }
}

impl Source {
    pub fn new(source_funcs: &mut SourceFuncs, struct_size: u32) -> Source {
        unsafe {
            from_glib_full(ffi::g_source_new(source_funcs.to_glib_none_mut().0, struct_size))
        }
    }

    pub fn add_child_source(&self, child_source: &Source) {
        unsafe {
            ffi::g_source_add_child_source(self.to_glib_none().0, child_source.to_glib_none().0);
        }
    }

    //pub fn add_poll(&self, fd: /*Ignored*/&mut PollFD) {
    //    unsafe { TODO: call ffi::g_source_add_poll() }
    //}

    //#[cfg(feature = "v2_36")]
    //pub fn add_unix_fd(&self, fd: i32, events: /*Ignored*/IOCondition) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi::g_source_add_unix_fd() }
    //}

    pub fn attach(&self, context: Option<&MainContext>) -> u32 {
        unsafe {
            ffi::g_source_attach(self.to_glib_none().0, context.to_glib_none().0)
        }
    }

    pub fn destroy(&self) {
        unsafe {
            ffi::g_source_destroy(self.to_glib_none().0);
        }
    }

    pub fn get_can_recurse(&self) -> bool {
        unsafe {
            from_glib(ffi::g_source_get_can_recurse(self.to_glib_none().0))
        }
    }

    pub fn get_context(&self) -> Option<MainContext> {
        unsafe {
            from_glib_none(ffi::g_source_get_context(self.to_glib_none().0))
        }
    }

    //pub fn get_current_time(&self, timeval: /*Ignored*/&mut TimeVal) {
    //    unsafe { TODO: call ffi::g_source_get_current_time() }
    //}

    pub fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_source_get_name(self.to_glib_none().0))
        }
    }

    pub fn get_priority(&self) -> i32 {
        unsafe {
            ffi::g_source_get_priority(self.to_glib_none().0)
        }
    }

    pub fn get_ready_time(&self) -> i64 {
        unsafe {
            ffi::g_source_get_ready_time(self.to_glib_none().0)
        }
    }

    pub fn get_time(&self) -> i64 {
        unsafe {
            ffi::g_source_get_time(self.to_glib_none().0)
        }
    }

    pub fn is_destroyed(&self) -> bool {
        unsafe {
            from_glib(ffi::g_source_is_destroyed(self.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v2_36")]
    //pub fn modify_unix_fd(&self, tag: /*Unimplemented*/Fundamental: Pointer, new_events: /*Ignored*/IOCondition) {
    //    unsafe { TODO: call ffi::g_source_modify_unix_fd() }
    //}

    //#[cfg(feature = "v2_36")]
    //pub fn query_unix_fd(&self, tag: /*Unimplemented*/Fundamental: Pointer) -> /*Ignored*/IOCondition {
    //    unsafe { TODO: call ffi::g_source_query_unix_fd() }
    //}

    pub fn remove_child_source(&self, child_source: &Source) {
        unsafe {
            ffi::g_source_remove_child_source(self.to_glib_none().0, child_source.to_glib_none().0);
        }
    }

    //pub fn remove_poll(&self, fd: /*Ignored*/&mut PollFD) {
    //    unsafe { TODO: call ffi::g_source_remove_poll() }
    //}

    //#[cfg(feature = "v2_36")]
    //pub fn remove_unix_fd(&self, tag: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::g_source_remove_unix_fd() }
    //}

    //pub fn set_callback(&self, func: /*Unknown conversion*//*Unimplemented*/SourceFunc, data: /*Unimplemented*/Option<Fundamental: Pointer>, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::g_source_set_callback() }
    //}

    //pub fn set_callback_indirect(&self, callback_data: /*Unimplemented*/Option<Fundamental: Pointer>, callback_funcs: /*Ignored*/&mut SourceCallbackFuncs) {
    //    unsafe { TODO: call ffi::g_source_set_callback_indirect() }
    //}

    pub fn set_can_recurse(&self, can_recurse: bool) {
        unsafe {
            ffi::g_source_set_can_recurse(self.to_glib_none().0, can_recurse.to_glib());
        }
    }

    pub fn set_funcs(&self, funcs: &mut SourceFuncs) {
        unsafe {
            ffi::g_source_set_funcs(self.to_glib_none().0, funcs.to_glib_none_mut().0);
        }
    }

    pub fn set_name(&self, name: &str) {
        unsafe {
            ffi::g_source_set_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    pub fn set_priority(&self, priority: i32) {
        unsafe {
            ffi::g_source_set_priority(self.to_glib_none().0, priority);
        }
    }

    #[cfg(feature = "v2_36")]
    pub fn set_ready_time(&self, ready_time: i64) {
        unsafe {
            ffi::g_source_set_ready_time(self.to_glib_none().0, ready_time);
        }
    }

    //pub fn remove_by_funcs_user_data(funcs: &mut SourceFuncs, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call ffi::g_source_remove_by_funcs_user_data() }
    //}

    //pub fn remove_by_user_data(user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call ffi::g_source_remove_by_user_data() }
    //}
}
